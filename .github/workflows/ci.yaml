name: Build → Push → Deploy to EKS

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: nikhilnamaji/hello-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag image
        id: build-image
        run: |
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
          IMAGE_TAG=${IMAGE_NAME}:${SHORT_SHA}
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          docker build -t ${IMAGE_TAG} ./app
          docker tag ${IMAGE_TAG} ${IMAGE_NAME}:latest

      - name: Push images
        run: |
          docker push ${{ steps.build-image.outputs.IMAGE_TAG }}
          docker push ${IMAGE_NAME}:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name nikhil-eks-cluster --region ${{ secrets.AWS_REGION }}

      - name: Set kubectl context
        run: kubectl config current-context

      - name: Deploy: update image
        run: |
          IMAGE_TAG=${{ steps.build-image.outputs.IMAGE_TAG }}
          # Create k8s objects if they don't exist
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          # Patch deployment with the new image (by container name)
          kubectl set image deployment/hello-app hello-app=${IMAGE_TAG} --record
          kubectl rollout status deployment/hello-app --timeout=120s

      - name: Get Service info (public endpoint)
        run: kubectl get svc hello-app-svc -o wide